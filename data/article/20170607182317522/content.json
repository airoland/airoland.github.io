{
    "title": "Vue-cli 2.x 多项目支持指南",
    "time": "2017/06/07 18:22:59",
    "tags": ["Vue.js"],
    "content": "[TOC]\n\n# 1. 前言\n\n相信使用``Vue.js``开发大型项目的朋友多数会跟我一样使用``vue-cli``来做脚手架，在早期使用``vue-cli`` 1.x 版本时我就曾考虑过一件事——既然我已经花了很久``npm install``了一堆包，为什么不把他们复用起来呢？——即在同一套``vue-cli``里构建多个项目。\n\n于是当时我对``vue-cli`` 1.x 版本做了一系列改造，使其支持了多项目模式。在``Vue.js``升级到2.x之后``vue-cli``也相应到了2.x，许多配置也与之前不同，因此我又重新做了一遍改造，大致思路和1.x版本是一样的，所以这里我就只放出``vue-cli`` 2.x的多项目改造方式，还在使用1.x的朋友可以参考思路自行改造。当然，我还是推荐大家升级到最新版的``Vue.js`` 2.x，与时俱进~\n\n# 2. 项目结构变动\n\n首先是对build、config、src、static、test目录全部统一更改为下述结构（以两个项目举例）：\n\n- **build**\n  - **项目1**\n    - build.js\n    - check-version.js\n    - ...\n    - webpack.prod.conf.js\n  - **项目2**\n    - build.js\n    - check-version.js\n    - ...\n    - webpack.prod.conf.js\n- **config**\n  - **项目1**\n    - dev.env.js\n    - index.js\n    - prod.env.js\n    - test.env.js\n  - **项目2**\n    - dev.env.js\n    - index.js\n    - prod.env.js\n    - test.env.js\n- **dist**\n  - **项目1**（注[1]）\n    - static/\n    - index.html\n  - **项目2**（注[1]）\n    - static/\n    - index.html\n- **src**\n  - **项目1**\n    - assets/\n    - components/\n    - ...\n    - App.vue\n    - index.html（注[2]）\n    - main.js\n  - **项目2**\n    - assets/\n    - components/\n    - ...\n    - App.vue\n    - index.html（注[2]）\n    - main.js\n- **static**\n  - **项目1**\n    - css\n    - img\n    - ...\n  - **项目2**\n    - css\n    - img\n    - ...\n- **test**\n  - **项目1**\n    - e2e/\n    - ...\n  - **项目2**\n    - e2e/\n    - ...\n\n**注[1]：dist目录下的子项目目录会在build后自动生成**\n\n**注[2]：每个子项目会使用自己的index.html作为入口，不再使用根目录下的index.html**\n\n以此类推，每个子项目目录下面都是完整的一套配置，彼此独立，互不干扰，可以并行开发调试及发布。\n\n# 3. 启动脚本修改\n\n由于每个子项目都是独立的配置，因此在dev或build时我都要区分启动的是哪个项目，启动脚本在package.json中修改即可。\n\n将：\n\n```\n\"scripts\": {\n    \"dev\": \"node build/dev-server.js\",\n    \"build\": \"node build/build.js\",\n    \"e2e\": \"node test/e2e/runner.js\",\n    \"test\": \"npm run e2e\"\n}\n```\n\n修改为：\n\n```\n\"scripts\": {\n    \"dev-项目一（简称）\": \"node build/项目一/dev-server.js\",\n    \"build-项目一（简称）\": \"node build/项目一/build.js\",\n    \"e2e-项目一（简称）\": \"node test/项目一/e2e/runner.js\",\n    \"test-项目一（简称）\": \"npm run e2e-项目一（简称）\",\n    \n    \"dev-项目二（简称）\": \"node build/项目二/dev-server.js\",\n    \"build-项目二（简称）\": \"node build/项目二/build.js\",\n    \"e2e-项目二（简称）\": \"node test/项目二/e2e/runner.js\",\n    \"test-项目二（简称）\": \"npm run e2e-项目二（简称）\"\n}\n```\n\n也就是说npm run dev-项目一（简称） 即可调试项目一了。\n\n# 4. 配置文件修改\n\n以下配置文件均指 build/子项目/\\*.js 或 config/子项目/\\*.js 文件：\n\n**注意，只贴出最终修改完成的样子，所有注释//here的地方都是对原版有改动的地方**\n\n## build.js：\n\n```\nrequire('./check-versions')()\n\nprocess.env.NODE_ENV = 'production'\n\nvar ora = require('ora')\nvar rm = require('rimraf')\nvar path = require('path')\nvar chalk = require('chalk')\nvar webpack = require('webpack')\nvar config = require('../../config/子项目')  //here\nvar webpackConfig = require('./webpack.prod.conf')\n\nvar spinner = ora('building for production...')\nspinner.start()\n\nrm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err => {\n  if (err) throw err\n  webpack(webpackConfig, function (err, stats) {\n    spinner.stop()\n    if (err) throw err\n    process.stdout.write(stats.toString({\n      colors: true,\n      modules: false,\n      children: false,\n      chunks: false,\n      chunkModules: false\n    }) + '\\n\\n')\n\n    console.log(chalk.cyan('  Build complete.\\n'))\n    console.log(chalk.yellow(\n      '  Tip: built files are meant to be served over an HTTP server.\\n' +\n      '  Opening index.html over file:// won\\'t work.\\n'\n    ))\n  })\n})\n\n```\n\n## check-version.js：\n\n```\nvar chalk = require('chalk')\nvar semver = require('semver')\nvar packageConfig = require('../../package.json')  //here\n\nfunction exec (cmd) {\n  return require('child_process').execSync(cmd).toString().trim()\n}\n\nvar versionRequirements = [\n  {\n    name: 'node',\n    currentVersion: semver.clean(process.version),\n    versionRequirement: packageConfig.engines.node\n  },\n  {\n    name: 'npm',\n    currentVersion: exec('npm --version'),\n    versionRequirement: packageConfig.engines.npm\n  }\n]\n\nmodule.exports = function () {\n  var warnings = []\n  for (var i = 0; i < versionRequirements.length; i++) {\n    var mod = versionRequirements[i]\n    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) {\n      warnings.push(mod.name + ': ' +\n        chalk.red(mod.currentVersion) + ' should be ' +\n        chalk.green(mod.versionRequirement)\n      )\n    }\n  }\n\n  if (warnings.length) {\n    console.log('')\n    console.log(chalk.yellow('To use this template, you must update following to modules:'))\n    console.log()\n    for (var i = 0; i < warnings.length; i++) {\n      var warning = warnings[i]\n      console.log('  ' + warning)\n    }\n    console.log()\n    process.exit(1)\n  }\n}\n\n```\n\n## dev-server.js：\n\n```\nrequire('./check-versions')()\n\nvar config = require('../../config/子项目')  //here\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n}\n\nvar opn = require('opn')\nvar path = require('path')\nvar express = require('express')\nvar webpack = require('webpack')\nvar proxyMiddleware = require('http-proxy-middleware')\nvar webpackConfig = process.env.NODE_ENV === 'testing'\n  ? require('./webpack.prod.conf')\n  : require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\nvar port = process.env.PORT || config.dev.port\n// automatically open browser, if not set will be false\nvar autoOpenBrowser = !!config.dev.autoOpenBrowser\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\nvar proxyTable = config.dev.proxyTable\n\nvar app = express()\nvar compiler = webpack(webpackConfig)\n\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n\nvar hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: () => {}\n})\n// force page reload when html-webpack-plugin template changes\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\n// proxy api requests\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n// handle fallback for HTML5 history API\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\napp.use(hotMiddleware)\n\n// serve pure static assets\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\napp.use(staticPath, express.static('./static/子项目/'))  //here\n\nvar uri = 'http://localhost:' + port\n\ndevMiddleware.waitUntilValid(function () {\n  console.log('> Listening at ' + uri + '\\n')\n})\n\nmodule.exports = app.listen(port, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n\n  // when env is testing, don't need open it\n  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n})\n\n```\n\n## utils.js：\n\n```\nvar path = require('path')\nvar config = require('../../config/子项目')  //here\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\n\nexports.assetsPath = function (_path) {\n  var assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  var cssLoader = {\n    loader: 'css-loader',\n    options: {\n      minimize: process.env.NODE_ENV === 'production',\n      sourceMap: options.sourceMap\n    }\n  }\n\n  // generate loader string to be used with extract text plugin\n  function generateLoaders (loader, loaderOptions) {\n    var loaders = [cssLoader]\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n    // Extract CSS when that option is specified\n    // (which is the case during production build)\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n  // http://vuejs.github.io/vue-loader/en/configurations/extract-css.html\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n// Generate loaders for standalone style files (outside of .vue)\nexports.styleLoaders = function (options) {\n  var output = []\n  var loaders = exports.cssLoaders(options)\n  for (var extension in loaders) {\n    var loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n  return output\n}\n\n```\n\n## vue-loader.conf.js：\n\n```\nvar utils = require('./utils')\nvar config = require('../../config/子项目')  //here\nvar isProduction = process.env.NODE_ENV === 'production'\n\nmodule.exports = {\n  loaders: utils.cssLoaders({\n    sourceMap: isProduction\n      ? config.build.productionSourceMap\n      : config.dev.cssSourceMap,\n    extract: isProduction\n  })\n}\n\n```\n\n## webpack.base.conf.js：\n\n```\nvar path = require('path')\nvar utils = require('./utils')\nvar config = require('../../config/子项目')  //here\nvar vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', '..', dir)  //here\n}\n\nmodule.exports = {\n  entry: {\n    app: './src/子项目/main.js'  //here\n  },\n  output: {\n    path: config.build.assetsRoot,\n    filename: '[name].js',\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src/子项目'),  //here\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        query: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        query: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  }\n}\n\n```\n\n## webpack.dev.conf.js：\n\n```\nvar utils = require('./utils')\nvar webpack = require('webpack')\nvar config = require('../../config/子项目')  //here\nvar merge = require('webpack-merge')\nvar baseWebpackConfig = require('./webpack.base.conf')\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\nvar FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin')\n\n// add hot-reload related code to entry chunks\nObject.keys(baseWebpackConfig.entry).forEach(function (name) {\n  baseWebpackConfig.entry[name] = ['./build/子项目/dev-client'].concat(baseWebpackConfig.entry[name])  //here\n})\n\nmodule.exports = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap })\n  },\n  // cheap-module-eval-source-map is faster for development\n  devtool: '#cheap-module-eval-source-map',\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': config.dev.env\n    }),\n    // https://github.com/glenjamin/webpack-hot-middleware#installation--usage\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n    // https://github.com/ampedandwired/html-webpack-plugin\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: './src/子项目/index.html',  //here\n      inject: true\n    }),\n    new FriendlyErrorsPlugin()\n  ]\n})\n\n```\n\n## webpack.prod.conf.js：\n\n```\nvar path = require('path')\nvar utils = require('./utils')\nvar webpack = require('webpack')\nvar config = require('../../config/子项目')  //here\nvar merge = require('webpack-merge')\nvar baseWebpackConfig = require('./webpack.base.conf')\nvar CopyWebpackPlugin = require('copy-webpack-plugin')\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\nvar OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\n\nvar env = process.env.NODE_ENV === 'testing'\n  ? require('../../config/子项目/test.env')  //here\n  : config.build.env\n\nvar webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? '#source-map' : false,\n  output: {\n    path: config.build.assetsRoot,\n    filename: utils.assetsPath('js/[name].[chunkhash].js'),\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n  },\n  plugins: [\n    // http://vuejs.github.io/vue-loader/en/workflow/production.html\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      },\n      sourceMap: true\n    }),\n    // extract css into its own file\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css')\n    }),\n    // Compress extracted CSS. We are using this plugin so that possible\n    // duplicated CSS from different components can be deduped.\n    new OptimizeCSSPlugin(),\n    // generate dist index.html with correct asset hash for caching.\n    // you can customize output by editing /index.html\n    // see https://github.com/ampedandwired/html-webpack-plugin\n    new HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === 'testing'\n        ? 'index.html'\n        : config.build.index,\n      template: './src/子项目/index.html',  //here\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n        // more options:\n        // https://github.com/kangax/html-minifier#options-quick-reference\n      },\n      // necessary to consistently work with multiple chunks via CommonsChunkPlugin\n      chunksSortMode: 'dependency'\n    }),\n    // split vendor js into its own file\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: function (module, count) {\n        // any required modules inside node_modules are extracted to vendor\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '..', '../node_modules')  //here\n          ) === 0\n        )\n      }\n    }),\n    // extract webpack runtime and module manifest to its own file in order to\n    // prevent vendor hash from being updated whenever app bundle is updated\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      chunks: ['vendor']\n    }),\n    // copy custom static assets\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '..', '../static/子项目'),  //here\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n\nif (config.build.productionGzip) {\n  var CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n```\n\n\n## index.js：\n\n```\n// see http://vuejs-templates.github.io/webpack for documentation.\nvar path = require('path')\n\nmodule.exports = {\n  build: {\n    env: require('./prod.env'),\n    index: path.resolve(__dirname, '../../dist/子项目/index.html'),  //here\n    assetsRoot: path.resolve(__dirname, '../../dist/子项目'),  //here\n    assetsSubDirectory: 'static',\n    assetsPublicPath: '/',\n    productionSourceMap: true,\n    // Gzip off by default as many popular static hosts such as\n    // Surge or Netlify already gzip all static assets for you.\n    // Before setting to `true`, make sure to:\n    // npm install --save-dev compression-webpack-plugin\n    productionGzip: false,\n    productionGzipExtensions: ['js', 'css'],\n    // Run the build command with an extra argument to\n    // View the bundle analyzer report after build finishes:\n    // `npm run build --report`\n    // Set to `true` or `false` to always turn it on or off\n    bundleAnalyzerReport: process.env.npm_config_report\n  },\n  dev: {\n    env: require('./dev.env'),\n    port: 9999,\n    autoOpenBrowser: true,\n    assetsSubDirectory: 'static',\n    assetsPublicPath: '/',\n    proxyTable: {},\n    // CSS Sourcemaps off by default because relative paths are \"buggy\"\n    // with this option, according to the CSS-Loader README\n    // (https://github.com/webpack/css-loader#sourcemaps)\n    // In our experience, they generally work as expected,\n    // just be aware of this issue when enabling this option.\n    cssSourceMap: false\n  }\n}\n\n```\n\n# 5. 进阶技巧\n\n很多朋友会发现，当我们使用``vue-cli``时，对于静态资源的引用通常是 ``/static/**`` 的格式，在``dev``模式下``express``会托管``static``目录下的静态资源，而``build``之后包含所有资源的``static``文件夹和``index.html``会打包在同一目录下，同时``index.html``中注入的打包后的js路径也是 ``/static/js/*.js``。\n\n等我们准备部署到云服务器的时候，就会发现一个问题：\n\n由于资源是 ``/static/**`` 格式，因此我们必须把项目部署在网站域名根目录下，比如 ``http://www.someone.com/``，而不能使用子目录的形式，比如： ``http://www.someone.com/path/``，因为``index.html``会去找``http://www.someone.com/static/``而不是``http://www.someone.com/path/static/``，这样基本就限制了我们每个域名只能部署一个应用，或者需要为每个应用各申请一个二级域名（毕竟二级域名免费XD）。\n\n那如果我想用同一域名通过子目录的形式来部署多个项目该怎么办呢？下面我给大家提供一个方法。\n\n首先修改``config/子项目/index.js``中的``assetsPublicPath``：\n\n```\nmodule.exports = {\n  build: {\n    ......\n    assetsSubDirectory: 'static',\n    assetsPublicPath: '/path',  // 在这里写上你希望此项目使用的子目录\n    ......\n  },\n  dev: {\n    ......\n    assetsSubDirectory: 'static',\n    assetsPublicPath: '/path',\n    ......\n  }\n}\n\n```\n\n然后修改``build/子项目/webpack.dev.conf.js``，加上一段代码：\n\n```\n......\nmodule.exports = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap })\n  },\n  // 在这里加上下面这段代码，否则dev模式将无法正确托管静态资源路径\n  output: {\n    path: config.build.assetsRoot,\n    publicPath: '/',\n    filename: '[name].js'\n  },\n  // cheap-module-eval-source-map is faster for development\n  devtool: '#cheap-module-eval-source-map',\n  ......\n})\n\n```\n\n最后一定要记得，在开发使用到静态资源时的路径要全部写成``/path/static/**``的格式，发布时要配置好Nginx（或其他HTTP服务器）把``http://www.someone.com/path/``指向相应目录。\n\n全文完。\n\n转载时请注明 **原作者 A.I.Roland (博客地址：https://airoland.github.io/)** ，并附上 **原文链接** ，谢谢！\n\n\n\n",
    "abstract": "相信使用Vue.js开发大型项目的朋友多数会跟我一样使用vue-cli来做脚手架，在早期使用vue-cli 1.x 版本时我就曾考虑过一件事——既然我已经花了很久npm install了一堆包，为什么不把他们复用起来呢？——即在同一套vue-cli里构建多个项目。于是当时我对vue-cli 1.x 版本做了一系列改造，使其支持了多项目模式。在Vue.js升级到2.x之后vue-cli也相应到了2.x，许多配置也与之前不同，因此我又重新做了一遍改造，大致思路和1.x版本是一样的，所以这里我就只放出vue-cli 2.x的多项目改造方式，还在使用1.x的朋友可以参考思路自行改造。当然，我还是推荐大家升级到最新版的Vue.js 2.x，与时俱进~",
    "html": "<ul><li><a href=\"javascript:document.getElementById('1-').scrollIntoView()\">1. 前言</a></li>\n<li><a href=\"javascript:document.getElementById('2-').scrollIntoView()\">2. 项目结构变动</a></li>\n<li><a href=\"javascript:document.getElementById('3-').scrollIntoView()\">3. 启动脚本修改</a></li>\n<li><a href=\"javascript:document.getElementById('4-').scrollIntoView()\">4. 配置文件修改</a>\n<ul><li><a href=\"javascript:document.getElementById('build-js-').scrollIntoView()\">build.js：</a></li>\n<li><a href=\"javascript:document.getElementById('check-version-js-').scrollIntoView()\">check-version.js：</a></li>\n<li><a href=\"javascript:document.getElementById('dev-server-js-').scrollIntoView()\">dev-server.js：</a></li>\n<li><a href=\"javascript:document.getElementById('utils-js-').scrollIntoView()\">utils.js：</a></li>\n<li><a href=\"javascript:document.getElementById('vue-loader-conf-js-').scrollIntoView()\">vue-loader.conf.js：</a></li>\n<li><a href=\"javascript:document.getElementById('webpack-base-conf-js-').scrollIntoView()\">webpack.base.conf.js：</a></li>\n<li><a href=\"javascript:document.getElementById('webpack-dev-conf-js-').scrollIntoView()\">webpack.dev.conf.js：</a></li>\n<li><a href=\"javascript:document.getElementById('webpack-prod-conf-js-').scrollIntoView()\">webpack.prod.conf.js：</a></li>\n<li><a href=\"javascript:document.getElementById('index-js-').scrollIntoView()\">index.js：</a>\n</li>\n</ul>\n</li><li><a href=\"javascript:document.getElementById('5-').scrollIntoView()\">5. 进阶技巧</a></li>\n</ul>\n\n<h1 id=\"1-\">1. 前言</h1>\n<p>相信使用<code>Vue.js</code>开发大型项目的朋友多数会跟我一样使用<code>vue-cli</code>来做脚手架，在早期使用<code>vue-cli</code> 1.x 版本时我就曾考虑过一件事——既然我已经花了很久<code>npm install</code>了一堆包，为什么不把他们复用起来呢？——即在同一套<code>vue-cli</code>里构建多个项目。</p>\n<p>于是当时我对<code>vue-cli</code> 1.x 版本做了一系列改造，使其支持了多项目模式。在<code>Vue.js</code>升级到2.x之后<code>vue-cli</code>也相应到了2.x，许多配置也与之前不同，因此我又重新做了一遍改造，大致思路和1.x版本是一样的，所以这里我就只放出<code>vue-cli</code> 2.x的多项目改造方式，还在使用1.x的朋友可以参考思路自行改造。当然，我还是推荐大家升级到最新版的<code>Vue.js</code> 2.x，与时俱进~</p>\n<h1 id=\"2-\">2. 项目结构变动</h1>\n<p>首先是对build、config、src、static、test目录全部统一更改为下述结构（以两个项目举例）：</p>\n<ul>\n<li><strong>build</strong><ul>\n<li><strong>项目1</strong><ul>\n<li>build.js</li>\n<li>check-version.js</li>\n<li>...</li>\n<li>webpack.prod.conf.js</li>\n</ul>\n</li>\n<li><strong>项目2</strong><ul>\n<li>build.js</li>\n<li>check-version.js</li>\n<li>...</li>\n<li>webpack.prod.conf.js</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>config</strong><ul>\n<li><strong>项目1</strong><ul>\n<li>dev.env.js</li>\n<li>index.js</li>\n<li>prod.env.js</li>\n<li>test.env.js</li>\n</ul>\n</li>\n<li><strong>项目2</strong><ul>\n<li>dev.env.js</li>\n<li>index.js</li>\n<li>prod.env.js</li>\n<li>test.env.js</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>dist</strong><ul>\n<li><strong>项目1</strong>（注[1]）<ul>\n<li>static/</li>\n<li>index.html</li>\n</ul>\n</li>\n<li><strong>项目2</strong>（注[1]）<ul>\n<li>static/</li>\n<li>index.html</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>src</strong><ul>\n<li><strong>项目1</strong><ul>\n<li>assets/</li>\n<li>components/</li>\n<li>...</li>\n<li>App.vue</li>\n<li>index.html（注[2]）</li>\n<li>main.js</li>\n</ul>\n</li>\n<li><strong>项目2</strong><ul>\n<li>assets/</li>\n<li>components/</li>\n<li>...</li>\n<li>App.vue</li>\n<li>index.html（注[2]）</li>\n<li>main.js</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>static</strong><ul>\n<li><strong>项目1</strong><ul>\n<li>css</li>\n<li>img</li>\n<li>...</li>\n</ul>\n</li>\n<li><strong>项目2</strong><ul>\n<li>css</li>\n<li>img</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>test</strong><ul>\n<li><strong>项目1</strong><ul>\n<li>e2e/</li>\n<li>...</li>\n</ul>\n</li>\n<li><strong>项目2</strong><ul>\n<li>e2e/</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>注[1]：dist目录下的子项目目录会在build后自动生成</strong></p>\n<p><strong>注[2]：每个子项目会使用自己的index.html作为入口，不再使用根目录下的index.html</strong></p>\n<p>以此类推，每个子项目目录下面都是完整的一套配置，彼此独立，互不干扰，可以并行开发调试及发布。</p>\n<h1 id=\"3-\">3. 启动脚本修改</h1>\n<p>由于每个子项目都是独立的配置，因此在dev或build时我都要区分启动的是哪个项目，启动脚本在package.json中修改即可。</p>\n<p>将：</p>\n<pre><code><span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"dev\"</span>: <span class=\"hljs-string\">\"node build/dev-server.js\"</span>,\n    <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"node build/build.js\"</span>,\n    <span class=\"hljs-string\">\"e2e\"</span>: <span class=\"hljs-string\">\"node test/e2e/runner.js\"</span>,\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"npm run e2e\"</span>\n}\n</code></pre><p>修改为：</p>\n<pre><code><span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"dev-项目一（简称）\"</span>: <span class=\"hljs-string\">\"node build/项目一/dev-server.js\"</span>,\n    <span class=\"hljs-string\">\"build-项目一（简称）\"</span>: <span class=\"hljs-string\">\"node build/项目一/build.js\"</span>,\n    <span class=\"hljs-string\">\"e2e-项目一（简称）\"</span>: <span class=\"hljs-string\">\"node test/项目一/e2e/runner.js\"</span>,\n    <span class=\"hljs-string\">\"test-项目一（简称）\"</span>: <span class=\"hljs-string\">\"npm run e2e-项目一（简称）\"</span>,\n\n    <span class=\"hljs-string\">\"dev-项目二（简称）\"</span>: <span class=\"hljs-string\">\"node build/项目二/dev-server.js\"</span>,\n    <span class=\"hljs-string\">\"build-项目二（简称）\"</span>: <span class=\"hljs-string\">\"node build/项目二/build.js\"</span>,\n    <span class=\"hljs-string\">\"e2e-项目二（简称）\"</span>: <span class=\"hljs-string\">\"node test/项目二/e2e/runner.js\"</span>,\n    <span class=\"hljs-string\">\"test-项目二（简称）\"</span>: <span class=\"hljs-string\">\"npm run e2e-项目二（简称）\"</span>\n}\n</code></pre><p>也就是说npm run dev-项目一（简称） 即可调试项目一了。</p>\n<h1 id=\"4-\">4. 配置文件修改</h1>\n<p>以下配置文件均指 build/子项目/*.js 或 config/子项目/*.js 文件：</p>\n<p><strong>注意，只贴出最终修改完成的样子，所有注释//here的地方都是对原版有改动的地方</strong></p>\n<h2 id=\"build-js-\">build.js：</h2>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'./check-versions'</span>)</span><span class=\"hljs-params\">()</span></span>\n\nprocess<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.NODE_ENV</span> = <span class=\"hljs-string\">'production'</span>\n\n<span class=\"hljs-selector-tag\">var</span> ora = require(<span class=\"hljs-string\">'ora'</span>)\n<span class=\"hljs-selector-tag\">var</span> rm = require(<span class=\"hljs-string\">'rimraf'</span>)\n<span class=\"hljs-selector-tag\">var</span> path = require(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-selector-tag\">var</span> chalk = require(<span class=\"hljs-string\">'chalk'</span>)\n<span class=\"hljs-selector-tag\">var</span> webpack = require(<span class=\"hljs-string\">'webpack'</span>)\n<span class=\"hljs-selector-tag\">var</span> config = require(<span class=\"hljs-string\">'../../config/子项目'</span>)  <span class=\"hljs-comment\">//here</span>\n<span class=\"hljs-selector-tag\">var</span> webpackConfig = require(<span class=\"hljs-string\">'./webpack.prod.conf'</span>)\n\n<span class=\"hljs-selector-tag\">var</span> spinner = ora(<span class=\"hljs-string\">'building for production...'</span>)\nspinner.start()\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">rm</span><span class=\"hljs-params\">(path.join(config.build.assetsRoot, config.build.assetsSubDirectory)</span></span>, err =&gt; {\n  <span class=\"hljs-keyword\">if</span> (err) throw err\n  webpack(webpackConfig, function (err, stats) {\n    spinner.stop()\n    <span class=\"hljs-keyword\">if</span> (err) throw err\n    process<span class=\"hljs-selector-class\">.stdout</span><span class=\"hljs-selector-class\">.write</span>(stats.toString({\n      colors: true,\n      modules: false,\n      children: false,\n      chunks: false,\n      chunkModules: false\n    }) + <span class=\"hljs-string\">'\\n\\n'</span>)\n\n    console.log(chalk.cyan(<span class=\"hljs-string\">'  Build complete.\\n'</span>))\n    console.log(chalk.yellow(\n      <span class=\"hljs-string\">'  Tip: built files are meant to be served over an HTTP server.\\n'</span> +\n      <span class=\"hljs-string\">'  Opening index.html over file:// won\\'t work.\\n'</span>\n    ))\n  })\n})\n</code></pre><h2 id=\"check-version-js-\">check-version.js：</h2>\n<pre><code><span class=\"hljs-keyword\">var</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'chalk'</span>)\n<span class=\"hljs-keyword\">var</span> semver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'semver'</span>)\n<span class=\"hljs-keyword\">var</span> packageConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../package.json'</span>)  <span class=\"hljs-comment\">//here</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">exec</span> (<span class=\"hljs-params\">cmd</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'child_process'</span>).execSync(cmd).toString().trim()\n}\n\n<span class=\"hljs-keyword\">var</span> versionRequirements = [\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'node'</span>,\n    <span class=\"hljs-attr\">currentVersion</span>: semver.clean(process.version),\n    <span class=\"hljs-attr\">versionRequirement</span>: packageConfig.engines.node\n  },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'npm'</span>,\n    <span class=\"hljs-attr\">currentVersion</span>: exec(<span class=\"hljs-string\">'npm --version'</span>),\n    <span class=\"hljs-attr\">versionRequirement</span>: packageConfig.engines.npm\n  }\n]\n\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> warnings = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; versionRequirements.length; i++) {\n    <span class=\"hljs-keyword\">var</span> mod = versionRequirements[i]\n    <span class=\"hljs-keyword\">if</span> (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) {\n      warnings.push(mod.name + <span class=\"hljs-string\">': '</span> +\n        chalk.red(mod.currentVersion) + <span class=\"hljs-string\">' should be '</span> +\n        chalk.green(mod.versionRequirement)\n      )\n    }\n  }\n\n  <span class=\"hljs-keyword\">if</span> (warnings.length) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">''</span>)\n    <span class=\"hljs-built_in\">console</span>.log(chalk.yellow(<span class=\"hljs-string\">'To use this template, you must update following to modules:'</span>))\n    <span class=\"hljs-built_in\">console</span>.log()\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; warnings.length; i++) {\n      <span class=\"hljs-keyword\">var</span> warning = warnings[i]\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'  '</span> + warning)\n    }\n    <span class=\"hljs-built_in\">console</span>.log()\n    process.exit(<span class=\"hljs-number\">1</span>)\n  }\n}\n</code></pre><h2 id=\"dev-server-js-\">dev-server.js：</h2>\n<pre><code><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./check-versions'</span>)()\n\n<span class=\"hljs-keyword\">var</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../config/子项目'</span>)  <span class=\"hljs-comment\">//here</span>\n<span class=\"hljs-keyword\">if</span> (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = <span class=\"hljs-built_in\">JSON</span>.parse(config.dev.env.NODE_ENV)\n}\n\n<span class=\"hljs-keyword\">var</span> opn = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'opn'</span>)\n<span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)\n<span class=\"hljs-keyword\">var</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>)\n<span class=\"hljs-keyword\">var</span> proxyMiddleware = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http-proxy-middleware'</span>)\n<span class=\"hljs-keyword\">var</span> webpackConfig = process.env.NODE_ENV === <span class=\"hljs-string\">'testing'</span>\n  ? <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./webpack.prod.conf'</span>)\n  : <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./webpack.dev.conf'</span>)\n\n<span class=\"hljs-comment\">// default port where dev server listens for incoming traffic</span>\n<span class=\"hljs-keyword\">var</span> port = process.env.PORT || config.dev.port\n<span class=\"hljs-comment\">// automatically open browser, if not set will be false</span>\n<span class=\"hljs-keyword\">var</span> autoOpenBrowser = !!config.dev.autoOpenBrowser\n<span class=\"hljs-comment\">// Define HTTP proxies to your custom API backend</span>\n<span class=\"hljs-comment\">// https://github.com/chimurai/http-proxy-middleware</span>\n<span class=\"hljs-keyword\">var</span> proxyTable = config.dev.proxyTable\n\n<span class=\"hljs-keyword\">var</span> app = express()\n<span class=\"hljs-keyword\">var</span> compiler = webpack(webpackConfig)\n\n<span class=\"hljs-keyword\">var</span> devMiddleware = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack-dev-middleware'</span>)(compiler, {\n  <span class=\"hljs-attr\">publicPath</span>: webpackConfig.output.publicPath,\n  <span class=\"hljs-attr\">quiet</span>: <span class=\"hljs-literal\">true</span>\n})\n\n<span class=\"hljs-keyword\">var</span> hotMiddleware = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack-hot-middleware'</span>)(compiler, {\n  <span class=\"hljs-attr\">log</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {}\n})\n<span class=\"hljs-comment\">// force page reload when html-webpack-plugin template changes</span>\ncompiler.plugin(<span class=\"hljs-string\">'compilation'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">compilation</span>) </span>{\n  compilation.plugin(<span class=\"hljs-string\">'html-webpack-plugin-after-emit'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data, cb</span>) </span>{\n    hotMiddleware.publish({ <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">'reload'</span> })\n    cb()\n  })\n})\n\n<span class=\"hljs-comment\">// proxy api requests</span>\n<span class=\"hljs-built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> options = proxyTable[context]\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> options === <span class=\"hljs-string\">'string'</span>) {\n    options = { <span class=\"hljs-attr\">target</span>: options }\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n<span class=\"hljs-comment\">// handle fallback for HTML5 history API</span>\napp.use(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'connect-history-api-fallback'</span>)())\n\n<span class=\"hljs-comment\">// serve webpack bundle output</span>\napp.use(devMiddleware)\n\n<span class=\"hljs-comment\">// enable hot-reload and state-preserving</span>\n<span class=\"hljs-comment\">// compilation error display</span>\napp.use(hotMiddleware)\n\n<span class=\"hljs-comment\">// serve pure static assets</span>\n<span class=\"hljs-keyword\">var</span> staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\napp.use(staticPath, express.static(<span class=\"hljs-string\">'./static/子项目/'</span>))  <span class=\"hljs-comment\">//here</span>\n\n<span class=\"hljs-keyword\">var</span> uri = <span class=\"hljs-string\">'http://localhost:'</span> + port\n\ndevMiddleware.waitUntilValid(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'&gt; Listening at '</span> + uri + <span class=\"hljs-string\">'\\n'</span>)\n})\n\n<span class=\"hljs-built_in\">module</span>.exports = app.listen(port, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) {\n    <span class=\"hljs-built_in\">console</span>.log(err)\n    <span class=\"hljs-keyword\">return</span>\n  }\n\n  <span class=\"hljs-comment\">// when env is testing, don't need open it</span>\n  <span class=\"hljs-keyword\">if</span> (autoOpenBrowser &amp;&amp; process.env.NODE_ENV !== <span class=\"hljs-string\">'testing'</span>) {\n    opn(uri)\n  }\n})\n</code></pre><h2 id=\"utils-js-\">utils.js：</h2>\n<pre><code><span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">var</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../config/子项目'</span>)  <span class=\"hljs-comment\">//here</span>\n<span class=\"hljs-keyword\">var</span> ExtractTextPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'extract-text-webpack-plugin'</span>)\n\nexports.assetsPath = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_path</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> assetsSubDirectory = process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span>\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n  <span class=\"hljs-keyword\">return</span> path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options</span>) </span>{\n  options = options || {}\n\n  <span class=\"hljs-keyword\">var</span> cssLoader = {\n    <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'css-loader'</span>,\n    <span class=\"hljs-attr\">options</span>: {\n      <span class=\"hljs-attr\">minimize</span>: process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span>,\n      <span class=\"hljs-attr\">sourceMap</span>: options.sourceMap\n    }\n  }\n\n  <span class=\"hljs-comment\">// generate loader string to be used with extract text plugin</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">generateLoaders</span> (<span class=\"hljs-params\">loader, loaderOptions</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> loaders = [cssLoader]\n    <span class=\"hljs-keyword\">if</span> (loader) {\n      loaders.push({\n        <span class=\"hljs-attr\">loader</span>: loader + <span class=\"hljs-string\">'-loader'</span>,\n        <span class=\"hljs-attr\">options</span>: <span class=\"hljs-built_in\">Object</span>.assign({}, loaderOptions, {\n          <span class=\"hljs-attr\">sourceMap</span>: options.sourceMap\n        })\n      })\n    }\n\n    <span class=\"hljs-comment\">// Extract CSS when that option is specified</span>\n    <span class=\"hljs-comment\">// (which is the case during production build)</span>\n    <span class=\"hljs-keyword\">if</span> (options.extract) {\n      <span class=\"hljs-keyword\">return</span> ExtractTextPlugin.extract({\n        <span class=\"hljs-attr\">use</span>: loaders,\n        <span class=\"hljs-attr\">fallback</span>: <span class=\"hljs-string\">'vue-style-loader'</span>\n      })\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'vue-style-loader'</span>].concat(loaders)\n    }\n  }\n\n  <span class=\"hljs-comment\">// http://vuejs.github.io/vue-loader/en/configurations/extract-css.html</span>\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">css</span>: generateLoaders(),\n    <span class=\"hljs-attr\">postcss</span>: generateLoaders(),\n    <span class=\"hljs-attr\">less</span>: generateLoaders(<span class=\"hljs-string\">'less'</span>),\n    <span class=\"hljs-attr\">sass</span>: generateLoaders(<span class=\"hljs-string\">'sass'</span>, { <span class=\"hljs-attr\">indentedSyntax</span>: <span class=\"hljs-literal\">true</span> }),\n    <span class=\"hljs-attr\">scss</span>: generateLoaders(<span class=\"hljs-string\">'sass'</span>),\n    <span class=\"hljs-attr\">stylus</span>: generateLoaders(<span class=\"hljs-string\">'stylus'</span>),\n    <span class=\"hljs-attr\">styl</span>: generateLoaders(<span class=\"hljs-string\">'stylus'</span>)\n  }\n}\n\n<span class=\"hljs-comment\">// Generate loaders for standalone style files (outside of .vue)</span>\nexports.styleLoaders = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> output = []\n  <span class=\"hljs-keyword\">var</span> loaders = exports.cssLoaders(options)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> extension <span class=\"hljs-keyword\">in</span> loaders) {\n    <span class=\"hljs-keyword\">var</span> loader = loaders[extension]\n    output.push({\n      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">'\\\\.'</span> + extension + <span class=\"hljs-string\">'$'</span>),\n      <span class=\"hljs-attr\">use</span>: loader\n    })\n  }\n  <span class=\"hljs-keyword\">return</span> output\n}\n</code></pre><h2 id=\"vue-loader-conf-js-\">vue-loader.conf.js：</h2>\n<pre><code><span class=\"hljs-keyword\">var</span> utils = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./utils'</span>)\n<span class=\"hljs-keyword\">var</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../config/子项目'</span>)  <span class=\"hljs-comment\">//here</span>\n<span class=\"hljs-keyword\">var</span> isProduction = process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span>\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">loaders</span>: utils.cssLoaders({\n    <span class=\"hljs-attr\">sourceMap</span>: isProduction\n      ? config.build.productionSourceMap\n      : config.dev.cssSourceMap,\n    <span class=\"hljs-attr\">extract</span>: isProduction\n  })\n}\n</code></pre><h2 id=\"webpack-base-conf-js-\">webpack.base.conf.js：</h2>\n<pre><code><span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">var</span> utils = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./utils'</span>)\n<span class=\"hljs-keyword\">var</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../config/子项目'</span>)  <span class=\"hljs-comment\">//here</span>\n<span class=\"hljs-keyword\">var</span> vueLoaderConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./vue-loader.conf'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span> (<span class=\"hljs-params\">dir</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> path.join(__dirname, <span class=\"hljs-string\">'..'</span>, <span class=\"hljs-string\">'..'</span>, dir)  <span class=\"hljs-comment\">//here</span>\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  entry: {\n    app: <span class=\"hljs-string\">'./src/子项目/main.js'</span>  <span class=\"hljs-comment\">//here</span>\n  },\n  output: {\n    path: config.build.assetsRoot,\n    filename: <span class=\"hljs-string\">'[name].js'</span>,\n    publicPath: process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span>\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  resolve: {\n    extensions: [<span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.vue'</span>, <span class=\"hljs-string\">'.json'</span>],\n    alias: {\n      <span class=\"hljs-string\">'vue$'</span>: <span class=\"hljs-string\">'vue/dist/vue.esm.js'</span>,\n      <span class=\"hljs-string\">'@'</span>: resolve(<span class=\"hljs-string\">'src/子项目'</span>),  <span class=\"hljs-comment\">//here</span>\n    }\n  },\n  <span class=\"hljs-keyword\">module</span>: {\n    rules: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.vue$/</span>,\n        loader: <span class=\"hljs-string\">'vue-loader'</span>,\n        options: vueLoaderConfig\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.js$/</span>,\n        loader: <span class=\"hljs-string\">'babel-loader'</span>,\n        include: [resolve(<span class=\"hljs-string\">'src'</span>), resolve(<span class=\"hljs-string\">'test'</span>)]\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,\n        loader: <span class=\"hljs-string\">'url-loader'</span>,\n        query: {\n          limit: <span class=\"hljs-number\">10000</span>,\n          name: utils.assetsPath(<span class=\"hljs-string\">'img/[name].[hash:7].[ext]'</span>)\n        }\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,\n        loader: <span class=\"hljs-string\">'url-loader'</span>,\n        query: {\n          limit: <span class=\"hljs-number\">10000</span>,\n          name: utils.assetsPath(<span class=\"hljs-string\">'fonts/[name].[hash:7].[ext]'</span>)\n        }\n      }\n    ]\n  }\n}\n</code></pre><h2 id=\"webpack-dev-conf-js-\">webpack.dev.conf.js：</h2>\n<pre><code><span class=\"hljs-selector-tag\">var</span> utils = require(<span class=\"hljs-string\">'./utils'</span>)\n<span class=\"hljs-selector-tag\">var</span> webpack = require(<span class=\"hljs-string\">'webpack'</span>)\n<span class=\"hljs-selector-tag\">var</span> config = require(<span class=\"hljs-string\">'../../config/子项目'</span>)  <span class=\"hljs-comment\">//here</span>\n<span class=\"hljs-selector-tag\">var</span> merge = require(<span class=\"hljs-string\">'webpack-merge'</span>)\n<span class=\"hljs-selector-tag\">var</span> baseWebpackConfig = require(<span class=\"hljs-string\">'./webpack.base.conf'</span>)\n<span class=\"hljs-selector-tag\">var</span> HtmlWebpackPlugin = require(<span class=\"hljs-string\">'html-webpack-plugin'</span>)\n<span class=\"hljs-selector-tag\">var</span> FriendlyErrorsPlugin = require(<span class=\"hljs-string\">'friendly-errors-webpack-plugin'</span>)\n\n<span class=\"hljs-comment\">// add hot-reload related code to entry chunks</span>\nObject.keys(baseWebpackConfig.entry).forEach(function (name) {\n  baseWebpackConfig<span class=\"hljs-selector-class\">.entry</span>[name] = [<span class=\"hljs-string\">'./build/子项目/dev-client'</span>].concat(baseWebpackConfig<span class=\"hljs-selector-class\">.entry</span>[name])  <span class=\"hljs-comment\">//here</span>\n})\n\nmodule<span class=\"hljs-selector-class\">.exports</span> = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({ sourceMap: config<span class=\"hljs-selector-class\">.dev</span><span class=\"hljs-selector-class\">.cssSourceMap</span> })\n  },\n  <span class=\"hljs-comment\">// cheap-module-eval-source-map is faster for development</span>\n  devtool: <span class=\"hljs-string\">'#cheap-module-eval-source-map'</span>,\n  plugins: [\n    new webpack.DefinePlugin({\n      <span class=\"hljs-string\">'process.env'</span>: config<span class=\"hljs-selector-class\">.dev</span><span class=\"hljs-selector-class\">.env</span>\n    }),\n    <span class=\"hljs-comment\">// https://github.com/glenjamin/webpack-hot-middleware#installation--usage</span>\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n    <span class=\"hljs-comment\">// https://github.com/ampedandwired/html-webpack-plugin</span>\n    new HtmlWebpackPlugin({\n      filename: <span class=\"hljs-string\">'index.html'</span>,\n      template: <span class=\"hljs-string\">'./src/子项目/index.html'</span>,  <span class=\"hljs-comment\">//here</span>\n      inject: true\n    }),\n    new FriendlyErrorsPlugin()\n  ]\n})\n</code></pre><h2 id=\"webpack-prod-conf-js-\">webpack.prod.conf.js：</h2>\n<pre><code>var path = require('path')\nvar utils = require('./utils')\nvar webpack = require('webpack')\nvar config = require('../../config/子项目')  //here\nvar <span class=\"hljs-keyword\">merge</span> = require(<span class=\"hljs-string\">'webpack-merge'</span>)\n<span class=\"hljs-keyword\">var</span> baseWebpackConfig = require(<span class=\"hljs-string\">'./webpack.base.conf'</span>)\n<span class=\"hljs-keyword\">var</span> CopyWebpackPlugin = require(<span class=\"hljs-string\">'copy-webpack-plugin'</span>)\n<span class=\"hljs-keyword\">var</span> HtmlWebpackPlugin = require(<span class=\"hljs-string\">'html-webpack-plugin'</span>)\n<span class=\"hljs-keyword\">var</span> ExtractTextPlugin = require(<span class=\"hljs-string\">'extract-text-webpack-plugin'</span>)\n<span class=\"hljs-keyword\">var</span> OptimizeCSSPlugin = require(<span class=\"hljs-string\">'optimize-css-assets-webpack-plugin'</span>)\n\n<span class=\"hljs-keyword\">var</span> env = process.env.NODE_ENV === <span class=\"hljs-string\">'testing'</span>\n  ? require(<span class=\"hljs-string\">'../../config/子项目/test.env'</span>)  //here\n  : config.build.env\n\n<span class=\"hljs-keyword\">var</span> webpackConfig = <span class=\"hljs-keyword\">merge</span>(baseWebpackConfig, {\n  <span class=\"hljs-keyword\">module</span>: {\n    <span class=\"hljs-keyword\">rules</span>: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      <span class=\"hljs-keyword\">extract</span>: <span class=\"hljs-literal\">true</span>\n    })\n  },\n  devtool: config.build.productionSourceMap ? <span class=\"hljs-string\">'#source-map'</span> : <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-keyword\">output</span>: {\n    <span class=\"hljs-keyword\">path</span>: config.build.assetsRoot,\n    filename: utils.assetsPath(<span class=\"hljs-string\">'js/[name].[chunkhash].js'</span>),\n    chunkFilename: utils.assetsPath(<span class=\"hljs-string\">'js/[id].[chunkhash].js'</span>)\n  },\n  plugins: [\n    // <span class=\"hljs-keyword\">http</span>://vuejs.github.io/vue-loader/en/workflow/production.html\n    <span class=\"hljs-keyword\">new</span> webpack.DefinePlugin({\n      <span class=\"hljs-string\">'process.env'</span>: env\n    }),\n    <span class=\"hljs-keyword\">new</span> webpack.optimize.UglifyJsPlugin({\n      <span class=\"hljs-keyword\">compress</span>: {\n        <span class=\"hljs-keyword\">warnings</span>: <span class=\"hljs-literal\">false</span>\n      },\n      sourceMap: <span class=\"hljs-literal\">true</span>\n    }),\n    // <span class=\"hljs-keyword\">extract</span> css <span class=\"hljs-keyword\">into</span> its own <span class=\"hljs-keyword\">file</span>\n    <span class=\"hljs-keyword\">new</span> ExtractTextPlugin({\n      filename: utils.assetsPath(<span class=\"hljs-string\">'css/[name].[contenthash].css'</span>)\n    }),\n    // <span class=\"hljs-keyword\">Compress</span> extracted CSS. We <span class=\"hljs-keyword\">are</span> <span class=\"hljs-keyword\">using</span> this <span class=\"hljs-keyword\">plugin</span> so that possible\n    // duplicated CSS <span class=\"hljs-keyword\">from</span> different components can be deduped.\n    <span class=\"hljs-keyword\">new</span> OptimizeCSSPlugin(),\n    // generate dist index.html <span class=\"hljs-keyword\">with</span> correct asset <span class=\"hljs-keyword\">hash</span> <span class=\"hljs-keyword\">for</span> caching.\n    // you can customize <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">by</span> editing /index.html\n    // see https://github.com/ampedandwired/html-webpack-<span class=\"hljs-keyword\">plugin</span>\n    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === <span class=\"hljs-string\">'testing'</span>\n        ? <span class=\"hljs-string\">'index.html'</span>\n        : config.build.index,\n      <span class=\"hljs-keyword\">template</span>: <span class=\"hljs-string\">'./src/子项目/index.html'</span>,  //here\n      inject: <span class=\"hljs-literal\">true</span>,\n      minify: {\n        removeComments: <span class=\"hljs-literal\">true</span>,\n        collapseWhitespace: <span class=\"hljs-literal\">true</span>,\n        removeAttributeQuotes: <span class=\"hljs-literal\">true</span>\n        // more options:\n        // https://github.com/kangax/html-minifier#options-<span class=\"hljs-keyword\">quick</span>-<span class=\"hljs-keyword\">reference</span>\n      },\n      // necessary <span class=\"hljs-keyword\">to</span> consistently <span class=\"hljs-keyword\">work</span> <span class=\"hljs-keyword\">with</span> multiple chunks via CommonsChunkPlugin\n      chunksSortMode: <span class=\"hljs-string\">'dependency'</span>\n    }),\n    // <span class=\"hljs-keyword\">split</span> vendor js <span class=\"hljs-keyword\">into</span> its own <span class=\"hljs-keyword\">file</span>\n    <span class=\"hljs-keyword\">new</span> webpack.optimize.CommonsChunkPlugin({\n      <span class=\"hljs-keyword\">name</span>: <span class=\"hljs-string\">'vendor'</span>,\n      minChunks: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-keyword\">module</span>, <span class=\"hljs-keyword\">count</span>) {\n        // <span class=\"hljs-keyword\">any</span> <span class=\"hljs-keyword\">required</span> modules inside node_modules <span class=\"hljs-keyword\">are</span> extracted <span class=\"hljs-keyword\">to</span> vendor\n        <span class=\"hljs-keyword\">return</span> (\n          module.resource &amp;&amp;\n          /\\.js$/.test(module.resource) &amp;&amp;\n          module.resource.indexOf(\n            path.join(__dirname, <span class=\"hljs-string\">'..'</span>, <span class=\"hljs-string\">'../node_modules'</span>)  //here\n          ) === <span class=\"hljs-number\">0</span>\n        )\n      }\n    }),\n    // <span class=\"hljs-keyword\">extract</span> webpack runtime <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">module</span> manifest <span class=\"hljs-keyword\">to</span> its own <span class=\"hljs-keyword\">file</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">to</span>\n    // prevent vendor <span class=\"hljs-keyword\">hash</span> <span class=\"hljs-keyword\">from</span> being <span class=\"hljs-keyword\">updated</span> <span class=\"hljs-keyword\">whenever</span> app bundle <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">updated</span>\n    <span class=\"hljs-keyword\">new</span> webpack.optimize.CommonsChunkPlugin({\n      <span class=\"hljs-keyword\">name</span>: <span class=\"hljs-string\">'manifest'</span>,\n      chunks: [<span class=\"hljs-string\">'vendor'</span>]\n    }),\n    // copy custom <span class=\"hljs-keyword\">static</span> assets\n    <span class=\"hljs-keyword\">new</span> CopyWebpackPlugin([\n      {\n        <span class=\"hljs-keyword\">from</span>: path.resolve(__dirname, <span class=\"hljs-string\">'..'</span>, <span class=\"hljs-string\">'../static/子项目'</span>),  //here\n        <span class=\"hljs-keyword\">to</span>: config.build.assetsSubDirectory,\n        <span class=\"hljs-keyword\">ignore</span>: [<span class=\"hljs-string\">'.*'</span>]\n      }\n    ])\n  ]\n})\n\n<span class=\"hljs-keyword\">if</span> (config.build.productionGzip) {\n  <span class=\"hljs-keyword\">var</span> CompressionWebpackPlugin = require(<span class=\"hljs-string\">'compression-webpack-plugin'</span>)\n\n  webpackConfig.plugins.push(\n    <span class=\"hljs-keyword\">new</span> CompressionWebpackPlugin({\n      asset: <span class=\"hljs-string\">'[path].gz[query]'</span>,\n      algorithm: <span class=\"hljs-string\">'gzip'</span>,\n      <span class=\"hljs-keyword\">test</span>: <span class=\"hljs-keyword\">new</span> RegExp(\n        <span class=\"hljs-string\">'\\\\.('</span> +\n        config.build.productionGzipExtensions.join(<span class=\"hljs-string\">'|'</span>) +\n        <span class=\"hljs-string\">')$'</span>\n      ),\n      threshold: <span class=\"hljs-number\">10240</span>,\n      minRatio: <span class=\"hljs-number\">0.8</span>\n    })\n  )\n}\n\n<span class=\"hljs-keyword\">if</span> (config.build.bundleAnalyzerReport) {\n  <span class=\"hljs-keyword\">var</span> BundleAnalyzerPlugin = require(<span class=\"hljs-string\">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin\n  webpackConfig.plugins.push(<span class=\"hljs-keyword\">new</span> BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n</code></pre><h2 id=\"index-js-\">index.js：</h2>\n<pre><code><span class=\"hljs-regexp\">//</span> see http:<span class=\"hljs-regexp\">//</span>vuejs-templates.github.io/webpack <span class=\"hljs-keyword\">for</span> documentation.\nvar path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  build: {\n    env: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./prod.env'</span>),\n    index: path.resolve(__dirname, <span class=\"hljs-string\">'../../dist/子项目/index.html'</span>),  <span class=\"hljs-regexp\">//</span>here\n    assetsRoot: path.resolve(__dirname, <span class=\"hljs-string\">'../../dist/子项目'</span>),  <span class=\"hljs-regexp\">//</span>here\n    assetsSubDirectory: <span class=\"hljs-string\">'static'</span>,\n    assetsPublicPath: <span class=\"hljs-string\">'/'</span>,\n    productionSourceMap: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-regexp\">//</span> Gzip <span class=\"hljs-literal\">off</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> many popular static hosts such <span class=\"hljs-keyword\">as</span>\n    <span class=\"hljs-regexp\">//</span> Surge <span class=\"hljs-keyword\">or</span> Netlify already gzip all static assets <span class=\"hljs-keyword\">for</span> you.\n    <span class=\"hljs-regexp\">//</span> Before setting to `<span class=\"javascript\"><span class=\"hljs-literal\">true</span></span>`, make sure to:\n    <span class=\"hljs-regexp\">//</span> <span class=\"hljs-built_in\">npm</span> install --save-dev compression-webpack-plugin\n    productionGzip: <span class=\"hljs-literal\">false</span>,\n    productionGzipExtensions: [<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-string\">'css'</span>],\n    <span class=\"hljs-regexp\">//</span> Run the build command with an extra argument to\n    <span class=\"hljs-regexp\">//</span> View the bundle analyzer report after build finishes:\n    <span class=\"hljs-regexp\">//</span> `<span class=\"javascript\">npm run build --report</span>`\n    <span class=\"hljs-regexp\">//</span> Set to `<span class=\"javascript\"><span class=\"hljs-literal\">true</span></span>` <span class=\"hljs-keyword\">or</span> `<span class=\"javascript\"><span class=\"hljs-literal\">false</span></span>` to always turn it <span class=\"hljs-literal\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-literal\">off</span>\n    bundleAnalyzerReport: process.env.npm_config_report\n  },\n  dev: {\n    env: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./dev.env'</span>),\n    port: <span class=\"hljs-number\">9999</span>,\n    autoOpenBrowser: <span class=\"hljs-literal\">true</span>,\n    assetsSubDirectory: <span class=\"hljs-string\">'static'</span>,\n    assetsPublicPath: <span class=\"hljs-string\">'/'</span>,\n    proxyTable: {},\n    <span class=\"hljs-regexp\">//</span> CSS Sourcemaps <span class=\"hljs-literal\">off</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">default</span> because relative paths are <span class=\"hljs-string\">\"buggy\"</span>\n    <span class=\"hljs-regexp\">//</span> with <span class=\"hljs-keyword\">this</span> option, according to the CSS-Loader README\n    <span class=\"hljs-regexp\">//</span> (https:<span class=\"hljs-regexp\">//gi</span>thub.com/webpack/css-loader<span class=\"hljs-comment\">#sourcemaps)</span>\n    <span class=\"hljs-regexp\">//</span> In our experience, they generally work <span class=\"hljs-keyword\">as</span> expected,\n    <span class=\"hljs-regexp\">//</span> just be aware <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">this</span> issue <span class=\"hljs-keyword\">when</span> enabling <span class=\"hljs-keyword\">this</span> option.\n    cssSourceMap: <span class=\"hljs-literal\">false</span>\n  }\n}\n</code></pre><h1 id=\"5-\">5. 进阶技巧</h1>\n<p>很多朋友会发现，当我们使用<code>vue-cli</code>时，对于静态资源的引用通常是 <code>/static/**</code> 的格式，在<code>dev</code>模式下<code>express</code>会托管<code>static</code>目录下的静态资源，而<code>build</code>之后包含所有资源的<code>static</code>文件夹和<code>index.html</code>会打包在同一目录下，同时<code>index.html</code>中注入的打包后的js路径也是 <code>/static/js/*.js</code>。</p>\n<p>等我们准备部署到云服务器的时候，就会发现一个问题：</p>\n<p>由于资源是 <code>/static/**</code> 格式，因此我们必须把项目部署在网站域名根目录下，比如 <code>http://www.someone.com/</code>，而不能使用子目录的形式，比如： <code>http://www.someone.com/path/</code>，因为<code>index.html</code>会去找<code>http://www.someone.com/static/</code>而不是<code>http://www.someone.com/path/static/</code>，这样基本就限制了我们每个域名只能部署一个应用，或者需要为每个应用各申请一个二级域名（毕竟二级域名免费XD）。</p>\n<p>那如果我想用同一域名通过子目录的形式来部署多个项目该怎么办呢？下面我给大家提供一个方法。</p>\n<p>首先修改<code>config/子项目/index.js</code>中的<code>assetsPublicPath</code>：</p>\n<pre><code><span class=\"hljs-keyword\">module</span>.exports = {\n  build: {\n    ......\n    assetsSubDirectory: <span class=\"hljs-string\">'static'</span>,\n    assetsPublicPath: <span class=\"hljs-string\">'/path'</span>,  <span class=\"hljs-comment\">// 在这里写上你希望此项目使用的子目录</span>\n    ......\n  },\n  dev: {\n    ......\n    assetsSubDirectory: <span class=\"hljs-string\">'static'</span>,\n    assetsPublicPath: <span class=\"hljs-string\">'/path'</span>,\n    ......\n  }\n}\n</code></pre><p>然后修改<code>build/子项目/webpack.dev.conf.js</code>，加上一段代码：</p>\n<pre><code>......\n<span class=\"hljs-keyword\">module</span>.exports = merge(baseWebpackConfig, {\n  <span class=\"hljs-keyword\">module</span>: {\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap })\n  },\n  <span class=\"hljs-comment\">// 在这里加上下面这段代码，否则dev模式将无法正确托管静态资源路径</span>\n  output: {\n    path: config.build.assetsRoot,\n    publicPath: <span class=\"hljs-string\">'/'</span>,\n    filename: <span class=\"hljs-string\">'[name].js'</span>\n  },\n  <span class=\"hljs-comment\">// cheap-module-eval-source-map is faster for development</span>\n  devtool: <span class=\"hljs-string\">'#cheap-module-eval-source-map'</span>,\n  ......\n})\n</code></pre><p>最后一定要记得，在开发使用到静态资源时的路径要全部写成<code>/path/static/**</code>的格式，发布时要配置好Nginx（或其他HTTP服务器）把<code>http://www.someone.com/path/</code>指向相应目录。</p>\n<p>全文完。</p>\n<p>转载时请注明 <strong>原作者 A.I.Roland (博客地址：<a href=\"https://airoland.github.io/\">https://airoland.github.io/</a>)</strong> ，并附上 <strong>原文链接</strong> ，谢谢！</p>\n"
}