{
    "title": "Weex 踩坑日记：iOS篇——调试与打包",
    "time": "2017/08/31 10:23:27",
    "tags": ["Weex", "Vue.js", "Objective-C"],
    "content": "[TOC]\n\n# 1 前言\n\n近期做了一个APP，由于之前使用Vue.js技术栈较多，因此尝试了一下Weex，一路踩坑下来，**得出的结论基本是不推荐大家使用**（笑）。\n\n虽然最终还是用Weex把这个APP做成了，但之所以能做成，**是因为我把Weex的Android和iOS的SDK都进行了大量二次开发**，我建议大家有这时间不如直接上RN或者原生了，说实话RN我都不是很推荐，坑也一样不少，区别是踩坑的人和文档更多（笑），其实最好还是主要用原生来写。如果一定要用Weex，那希望我的文章能为你提供一些帮助。\n\n《Weex踩坑日记》系列我计划是做三大部分的，即从`Weex-Vue`，`Android`和`iOS`三个方面至少写5-6篇文章。由于iOS适配是最后做的，所以趁热打铁先把iOS篇写了，其余部分后续会补上。\n\n# 2 准备环境\n\n`iOS`的开发只能在`OS X`上进行，所以需要一台Mac设备。建议大家最好不要采用黑苹果方式，会存在诸多问题。\n\n## 2.1 iOS开发工具\n\n首先去`AppStore`上安装下载`Xcode`开发工具，安装后执行：\n\n```\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n```\n\n然后开始准备安装`CocoaPods`，这是一个用于开发苹果软件的包管理工具。由于`CocoaPods`被墙，翻墙也有流量和网速限制，因此需要把Ruby源换成国内的RubyGems。\n\n先在命令行里查看当前的ruby源：\n\n```\n$ gem sources -l\nhttps://rubygems.org/   # 通常默认原生就是这个源\n```\n\n更新一下ruby：\n\n```\n$ gem update --system   # 有可能需要翻墙\n$ gem -v\n```\n\n然后将ruby源换掉，由于淘宝源`https://ruby.taobao.org/`已经不再维护并转移到了Ruby China，所以我们把源换成ruby-china：\n\n```\n$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n$ gem sources -l\nhttps://gems.ruby-china.org     # 确保只有 gems.ruby-china.org\n```\n\n安装`CocoaPods`：\n\n```\nsudo gem install cocoapods\n```\n\n如果出现`Operation not permitted - /usr/bin/xcodeproj`这个错误，就使用下面的命令来安装，或者干脆就直接用这条命令来安装：\n\n```\nsudo gem install -n /usr/local/bin cocoapods --pre \n```\n\n## 2.2 Weex环境\n\n安装`NodeJs`，随后用npm全局安装`weex-toolkit`，否则无法使用`weex`命令：\n\n```\nnpm install weex-toolkit -g\n```\n\n假设你已经有了开发好的Weex-Vue项目，可直接在项目里添加weex-ios模板：\n\n```\n$ weex platform add iOS \n```\n\n# 3 调试与配置\n\n## 3.1 安装依赖\n\n首先进入`platforms/ios`目录，修改Podfile，将`pod 'ATSDK-Weex'`，改为`pod 'ATSDK'`，否则运行模拟器调试时就会报以下错误：\n\n```\nCompileC build/Build/Intermediates/WeexDemo.build/Debug-iphonesimulator/WeexDemo.build/Objects-normal/x86_64/AppDelegate.o WeexDemo/AppDelegate.m normal x86_64 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n```\n\n然后开始安装依赖：\n\n```\n$ pod install\n```\n\n## 3.2 模拟器调试\n\n运行以下命令可以进行调试：\n\n```\n$ weex run ios\n```\n\n首次运行会提示安装`weexpack`，填`Y`即可。然后就会让你选择用哪个型号的iPhone来调试，选择后就会自动运行模拟器并安装APP调试了。\n\n之后再调试时可以选择两种情况：\n\n1. 如果你只修改了OC代码，那么可以直接使用Xcode来调试；\n2. 如果你修改过Weex-Vue代码，那么必须使用`weex run ios`来启动调试，这样会再次打包Weex代码，否则修改不会生效。\n\n## 3.3 修改Weex环境参数\n\n找到`platforms\\ios\\WeexDemo\\WeexConfig\\WeexSDKManager.m`文件中的`(void)initWeexSDK`函数：\n\n```\n+ (void)initWeexSDK\n{\n    [WXAppConfiguration setAppGroup:@\"AliApp\"];\n    [WXAppConfiguration setAppName:@\"WeexDemo\"];\n    [WXAppConfiguration setAppVersion:@\"1.8.3\"];\n    [WXAppConfiguration setExternalUserAgent:@\"ExternalUA\"];\n    \n    [WXSDKEngine initSDKEnvironment];\n    \n    [WXSDKEngine registerHandler:[WXImgLoaderDefaultImpl new] withProtocol:@protocol(WXImgLoaderProtocol)];\n    \n#ifdef DEBUG\n    [WXLog setLogLevel:WXLogLevelLog];\n#endif\n}\n```\n\n此处即可修改AppGroup、AppName、AppVersion等信息，这些信息在Weex中可以通过`WXEnvironment`对象或`weex.config.env`对象来访问。\n\n## 3.4 修改AppIcon、启动图片及动画\n\n应用图标的目录在`platforms\\ios\\WeexDemo\\Assets.xcassets\\AppIcon.appiconset`中，注意替换图片时每张图片都必须跟要替换的图片分辨率一致，然后直接覆盖替换即可。\n\n启动图片在`platforms\\ios\\WeexDemo\\Assets.xcassets\\LaunchImage.launchimage`中，替换时同上，注意分辨率。\n\nWeex本身自带一个启动动画，在`platforms\\ios\\WeexDemo\\AppDelegate.m`文件中的`startSplashScreen`函数：\n\n```\n- (void)startSplashScreen\n{\n    UIView* splashView = [[UIView alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n    splashView.backgroundColor = WEEX_COLOR;\n    \n    UIImageView *iconImageView = [UIImageView new];\n    UIImage *icon = [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@\"weex-icon\" ofType:@\"png\"]];\n    if ([icon respondsToSelector:@selector(imageWithRenderingMode:)]) {\n        iconImageView.image = [icon imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n        iconImageView.tintColor = [UIColor whiteColor];\n    } else {\n        iconImageView.image = icon;\n    }\n    iconImageView.frame = CGRectMake(0, 0, 320, 320);\n    iconImageView.contentMode = UIViewContentModeScaleAspectFit;\n    iconImageView.center = splashView.center;\n    [splashView addSubview:iconImageView];\n    \n    [self.window addSubview:splashView];\n    \n    float animationDuration = 1.4;\n    CGFloat shrinkDuration = animationDuration * 0.3;\n    CGFloat growDuration = animationDuration * 0.7;\n    \n    if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) {\n        [UIView animateWithDuration:shrinkDuration delay:1.0 usingSpringWithDamping:0.7f initialSpringVelocity:10 options:UIViewAnimationOptionCurveEaseInOut animations:^{\n            CGAffineTransform scaleTransform = CGAffineTransformMakeScale(0.75, 0.75);\n            iconImageView.transform = scaleTransform;\n        } completion:^(BOOL finished) {\n            [UIView animateWithDuration:growDuration animations:^{\n                CGAffineTransform scaleTransform = CGAffineTransformMakeScale(20, 20);\n                iconImageView.transform = scaleTransform;\n                splashView.alpha = 0;\n            } completion:^(BOOL finished) {\n                [splashView removeFromSuperview];\n            }];\n        }];\n    } else {\n        [UIView animateWithDuration:shrinkDuration delay:1.0 options:0 animations:^{\n            CGAffineTransform scaleTransform = CGAffineTransformMakeScale(0.75, 0.75);\n            iconImageView.transform = scaleTransform;\n        } completion:^(BOOL finished) {\n            [UIView animateWithDuration:growDuration animations:^{\n                CGAffineTransform scaleTransform = CGAffineTransformMakeScale(20, 20);\n                iconImageView.transform = scaleTransform;\n                splashView.alpha = 0;\n            } completion:^(BOOL finished) {\n                [splashView removeFromSuperview];\n            }];\n        }];\n    }\n}\n```\n\n说明：\n\n1. 此动画在背景图片之后播放；\n2. 动画的图标文件为：`platforms\\ios\\WeexDemo\\weex-icon.png`，需要注意的是，替换成自己的图片后`if ([icon respondsToSelector:@selector(imageWithRenderingMode:)])`这个条件可能会被触发，进而动画变成一张空白图，因此可考虑把这段删掉，直接执行`iconImageView.image = icon;`；\n3. 如果替换了启动图片，则动画的背景色也需要相应更改`splashView.backgroundColor = WEEX_COLOR;`，其中`WEEX_COLOR`的定义在`platforms\\ios\\WeexDemo\\DemoDefine.h`中：\n\n```\n#import <Foundation/Foundation.h>\n\n#define CURRENT_IP @\"your computer device ip\"\n\n#if TARGET_IPHONE_SIMULATOR\n    #define DEMO_HOST @\"127.0.0.1\"\n#else\n    #define DEMO_HOST CURRENT_IP\n#endif\n\n#define DEMO_URL(path) [NSString stringWithFormat:@\"http://%@:12580/%s\", DEMO_HOST, #path]\n\n#define HOME_URL [NSString stringWithFormat:@\"http://%@:8080/dist/index.js\", DEMO_HOST]\n\n#define BUNDLE_URL [NSString stringWithFormat:@\"file://%@/bundlejs/index.js\",[NSBundle mainBundle].bundlePath]\n\n#define UITEST_HOME_URL @\"http://test?_wx_tpl=http://localhost:12580/test/build/TC__Home.js\"\n\n#define QRSCAN  @\"com.taobao.WeexDemo.scan\"\n#define WEEX_COLOR [UIColor colorWithRed:0.27 green:0.71 blue:0.94 alpha:1]\n```\n\n注意这里的颜色采用RGBA，而且你在PS中定义的颜色可能跟实际有色差，因此最好定好色号，然后在使用RGBA时可用RGB来这样表示：\n\n```\n[UIColor colorWithRed:240/255.0 green:240/255.0 blue:240/255.0 alpha:1]\n```\n\n# 4 打包\n\n## 4.1 AppID和证书申请\n\n推荐这篇文章[《iOS App打包上架超详细流程》](http://www.jianshu.com/p/817686897ec1?open_source=weibo_search)，写的非常详细，本文不再赘述。\n\n## 4.2 其他准备\n\n先查看`/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/`下有没有`PackageApplication`这个文件，如果没有的话打包就会报错：\n\n```\nxcrun: error: unable to find utility \"PackageApplication\", not a developer tool or in PATH\n```\n\n可以去搜索引擎找一份或者去GitHub上下载一份：[dqy168888/PackageApplication](https://github.com/dqy168888/PackageApplication)或者[iOS-Reverse-Engineering-Dev/PackageApplication](https://github.com/iOS-Reverse-Engineering-Dev/PackageApplication)\n\n然后把文件放进`/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/`中，执行：\n\n```\nchmod a+x /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/PackageApplication\n```\n\n## 4.3 ios.config.json\n\n```\n{\n   \"AppName\":\"WeexApp\",\n   \"Version\":\"0.1\",\n   \"BuildVersion\":\"0.1.0\",\n   \"AppId\":\"\",\n   \"CodeSign\":\"\",\n   \"Profile\":\"\",\n   \"WeexBundle\":\"app.weex.js\"\n}\n```\n\n- AppName：你的App打包名称；\n- Version：主版本，与Xcode中你的设置最好一直，否则用`weex build ios`打包后会覆盖Xcode的配置；\n- BuildVersion：同上，这个的意思一般是在同一Version内多次打包后的增长值，有的人会用整数来表示；\n- AppId：与你申请的一致；\n- CodeSign：在 keychain 中点击右键获取的证书ID（证书名称）；\n- Profile：mobileprovision的UUID，下一节中讲解；\n- WeexBundle：这个属性不像`android.config.json`里那样支持远程URL，如果写成URL它会报错找不到文件，也就是它并没有把URL当做远程链接处理，以后有空我可能会通过修改源码来实现。但另一方面苹果对热更新封杀的也比较厉害，所以建议这里还是不要改动。\n\n## 4.4 mobileprovision的UUID获取\n\ncd到mobileprovision所在的文件夹，执行：\n\n```\nsecurity cms -D -i <你的mobileprovision文件>\n```\n\n会得到一大段dict结构的详细信息，其中包含UUID字段：\n\n```\n...\n\n<key>UUID</key> \n<string>1c38459f-7xxxxxe286351</string> \n\n...\n```\n\n把`<string>`包含的内容复制到`ios.config.json`中的`Profile`属性里即可。\n\n## 4.5 命令行打包\n\n全部准备好后就可以使用`weex build ios`进行打包了，途中会要求授权两次。\n\n注意打包后的ipa文件在`platforms/ios/build/ipa_build/ `路径下，而不是官方文档说的`/playground/build/ipa_build/`里。\n\n## 4.6 Xcode打包\n\n在`Product`菜单中选择`Archive`，如果是给朋友测试，需要先在苹果开发者中心添加朋友的设备，然后打包时选择`Ad Hoc`打包，选择添加好的设备，打包成的ipa就可以给指定设备测试了。\n\n全文完。\n\n转载时请注明 **原作者 A.I.Roland (博客地址：https://airoland.github.io/)** ，并附上 **原文链接** ，谢谢！",
    "abstract": "近期做了一个APP，由于之前使用Vue.js技术栈较多，因此尝试了一下Weex，一路踩坑下来，得出的结论基本是不推荐大家使用（笑）。虽然最终还是用Weex把这个APP做成了，但之所以能做成，是因为我把Weex的Android和iOS的SDK都进行了大量二次开发，我建议大家有这时间不如直接上RN或者原生了，说实话RN我都不是很推荐，坑也一样不少，区别是踩坑的人和文档更多（笑），其实最好还是主要用原生来写。如果一定要用Weex，那希望我的文章能为你提供一些帮助。",
    "html": "<ul><li><a href=\"javascript:document.getElementById('1-').scrollIntoView()\">1 前言</a></li>\n<li><a href=\"javascript:document.getElementById('2-').scrollIntoView()\">2 准备环境</a>\n<ul><li><a href=\"javascript:document.getElementById('2-1-ios-').scrollIntoView()\">2.1 iOS开发工具</a></li>\n<li><a href=\"javascript:document.getElementById('2-2-weex-').scrollIntoView()\">2.2 Weex环境</a>\n</li>\n</ul>\n</li><li><a href=\"javascript:document.getElementById('3-').scrollIntoView()\">3 调试与配置</a>\n<ul><li><a href=\"javascript:document.getElementById('3-1-').scrollIntoView()\">3.1 安装依赖</a></li>\n<li><a href=\"javascript:document.getElementById('3-2-').scrollIntoView()\">3.2 模拟器调试</a></li>\n<li><a href=\"javascript:document.getElementById('3-3-weex-').scrollIntoView()\">3.3 修改Weex环境参数</a></li>\n<li><a href=\"javascript:document.getElementById('3-4-appicon-').scrollIntoView()\">3.4 修改AppIcon、启动图片及动画</a>\n</li>\n</ul>\n</li><li><a href=\"javascript:document.getElementById('4-').scrollIntoView()\">4 打包</a>\n<ul><li><a href=\"javascript:document.getElementById('4-1-appid-').scrollIntoView()\">4.1 AppID和证书申请</a></li>\n<li><a href=\"javascript:document.getElementById('4-2-').scrollIntoView()\">4.2 其他准备</a></li>\n<li><a href=\"javascript:document.getElementById('4-3-ios-config-json').scrollIntoView()\">4.3 ios.config.json</a></li>\n<li><a href=\"javascript:document.getElementById('4-4-mobileprovision-uuid-').scrollIntoView()\">4.4 mobileprovision的UUID获取</a></li>\n<li><a href=\"javascript:document.getElementById('4-5-').scrollIntoView()\">4.5 命令行打包</a></li>\n<li><a href=\"javascript:document.getElementById('4-6-xcode-').scrollIntoView()\">4.6 Xcode打包</a></li>\n</ul></li>\n</ul>\n\n<h1 id=\"1-\">1 前言</h1>\n<p>近期做了一个APP，由于之前使用Vue.js技术栈较多，因此尝试了一下Weex，一路踩坑下来，<strong>得出的结论基本是不推荐大家使用</strong>（笑）。</p>\n<p>虽然最终还是用Weex把这个APP做成了，但之所以能做成，<strong>是因为我把Weex的Android和iOS的SDK都进行了大量二次开发</strong>，我建议大家有这时间不如直接上RN或者原生了，说实话RN我都不是很推荐，坑也一样不少，区别是踩坑的人和文档更多（笑），其实最好还是主要用原生来写。如果一定要用Weex，那希望我的文章能为你提供一些帮助。</p>\n<p>《Weex踩坑日记》系列我计划是做三大部分的，即从<code>Weex-Vue</code>，<code>Android</code>和<code>iOS</code>三个方面至少写5-6篇文章。由于iOS适配是最后做的，所以趁热打铁先把iOS篇写了，其余部分后续会补上。</p>\n<h1 id=\"2-\">2 准备环境</h1>\n<p><code>iOS</code>的开发只能在<code>OS X</code>上进行，所以需要一台Mac设备。建议大家最好不要采用黑苹果方式，会存在诸多问题。</p>\n<h2 id=\"2-1-ios-\">2.1 iOS开发工具</h2>\n<p>首先去<code>AppStore</code>上安装下载<code>Xcode</code>开发工具，安装后执行：</p>\n<pre><code>sudo xcode-select --<span class=\"hljs-keyword\">switch</span> <span class=\"hljs-regexp\">/Applications/</span>Xcode.app<span class=\"hljs-regexp\">/Contents/</span>Developer\n</code></pre><p>然后开始准备安装<code>CocoaPods</code>，这是一个用于开发苹果软件的包管理工具。由于<code>CocoaPods</code>被墙，翻墙也有流量和网速限制，因此需要把Ruby源换成国内的RubyGems。</p>\n<p>先在命令行里查看当前的ruby源：</p>\n<pre><code>$ gem sources -l\n<span class=\"hljs-symbol\">https:</span>//rubygems<span class=\"hljs-meta\">.org</span>/   <span class=\"hljs-meta\"># 通常默认原生就是这个源</span>\n</code></pre><p>更新一下ruby：</p>\n<pre><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> gem update --system   <span class=\"hljs-comment\"># 有可能需要翻墙</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> gem -v</span>\n</code></pre><p>然后将ruby源换掉，由于淘宝源<code>https://ruby.taobao.org/</code>已经不再维护并转移到了Ruby China，所以我们把源换成ruby-china：</p>\n<pre><code>$ gem sources --<span class=\"hljs-built_in\">add</span> http<span class=\"hljs-variable\">s:</span>//gems.<span class=\"hljs-keyword\">ruby</span>-china.org/ --<span class=\"hljs-built_in\">remove</span> http<span class=\"hljs-variable\">s:</span>//rubygems.org/\n$ gem sources -<span class=\"hljs-keyword\">l</span>\nhttp<span class=\"hljs-variable\">s:</span>//gems.<span class=\"hljs-keyword\">ruby</span>-china.org     # 确保只有 gems.<span class=\"hljs-keyword\">ruby</span>-china.org\n</code></pre><p>安装<code>CocoaPods</code>：</p>\n<pre><code>sudo gem <span class=\"hljs-keyword\">install</span> cocoapods\n</code></pre><p>如果出现<code>Operation not permitted - /usr/bin/xcodeproj</code>这个错误，就使用下面的命令来安装，或者干脆就直接用这条命令来安装：</p>\n<pre><code>sudo gem <span class=\"hljs-keyword\">install</span> -n /usr/<span class=\"hljs-keyword\">local</span>/<span class=\"hljs-keyword\">bin</span> cocoapods <span class=\"hljs-comment\">--pre</span>\n</code></pre><h2 id=\"2-2-weex-\">2.2 Weex环境</h2>\n<p>安装<code>NodeJs</code>，随后用npm全局安装<code>weex-toolkit</code>，否则无法使用<code>weex</code>命令：</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> weex-toolkit -g\n</code></pre><p>假设你已经有了开发好的Weex-Vue项目，可直接在项目里添加weex-ios模板：</p>\n<pre><code>$ weex platform <span class=\"hljs-keyword\">add</span><span class=\"bash\"> iOS</span>\n</code></pre><h1 id=\"3-\">3 调试与配置</h1>\n<h2 id=\"3-1-\">3.1 安装依赖</h2>\n<p>首先进入<code>platforms/ios</code>目录，修改Podfile，将<code>pod &#39;ATSDK-Weex&#39;</code>，改为<code>pod &#39;ATSDK&#39;</code>，否则运行模拟器调试时就会报以下错误：</p>\n<pre><code>CompileC build<span class=\"hljs-regexp\">/Build/</span>Intermediates<span class=\"hljs-regexp\">/WeexDemo.build/</span>Debug-iphonesimulator<span class=\"hljs-regexp\">/WeexDemo.build/</span>Objects-normal<span class=\"hljs-regexp\">/x86_64/</span>AppDelegate.o WeexDemo<span class=\"hljs-regexp\">/AppDelegate.m normal x86_64 objective-c com.apple.compilers.llvm.clang.1_0.compiler</span>\n</code></pre><p>然后开始安装依赖：</p>\n<pre><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> pod install</span>\n</code></pre><h2 id=\"3-2-\">3.2 模拟器调试</h2>\n<p>运行以下命令可以进行调试：</p>\n<pre><code>$ weex <span class=\"hljs-keyword\">run</span><span class=\"bash\"> ios</span>\n</code></pre><p>首次运行会提示安装<code>weexpack</code>，填<code>Y</code>即可。然后就会让你选择用哪个型号的iPhone来调试，选择后就会自动运行模拟器并安装APP调试了。</p>\n<p>之后再调试时可以选择两种情况：</p>\n<ol>\n<li>如果你只修改了OC代码，那么可以直接使用Xcode来调试；</li>\n<li>如果你修改过Weex-Vue代码，那么必须使用<code>weex run ios</code>来启动调试，这样会再次打包Weex代码，否则修改不会生效。</li>\n</ol>\n<h2 id=\"3-3-weex-\">3.3 修改Weex环境参数</h2>\n<p>找到<code>platforms\\ios\\WeexDemo\\WeexConfig\\WeexSDKManager.m</code>文件中的<code>(void)initWeexSDK</code>函数：</p>\n<pre><code>+ (void)initWeexSDK\n{\n    [WXAppConfiguration setAppGroup:@<span class=\"hljs-string\">\"AliApp\"</span>]<span class=\"hljs-comment\">;</span>\n    [WXAppConfiguration setAppName:@<span class=\"hljs-string\">\"WeexDemo\"</span>]<span class=\"hljs-comment\">;</span>\n    [WXAppConfiguration setAppVersion:@<span class=\"hljs-string\">\"1.8.3\"</span>]<span class=\"hljs-comment\">;</span>\n    [WXAppConfiguration setExternalUserAgent:@<span class=\"hljs-string\">\"ExternalUA\"</span>]<span class=\"hljs-comment\">;</span>\n\n    [WXSDKEngine initSDKEnvironment]<span class=\"hljs-comment\">;</span>\n\n    [WXSDKEngine registerHandler:[WXImgLoaderDefaultImpl new] withProtocol:@protocol(WXImgLoaderProtocol)]<span class=\"hljs-comment\">;</span>\n\n<span class=\"hljs-comment\">#ifdef DEBUG</span>\n    [WXLog setLogLevel:WXLogLevelLog]<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">#endif</span>\n}\n</code></pre><p>此处即可修改AppGroup、AppName、AppVersion等信息，这些信息在Weex中可以通过<code>WXEnvironment</code>对象或<code>weex.config.env</code>对象来访问。</p>\n<h2 id=\"3-4-appicon-\">3.4 修改AppIcon、启动图片及动画</h2>\n<p>应用图标的目录在<code>platforms\\ios\\WeexDemo\\Assets.xcassets\\AppIcon.appiconset</code>中，注意替换图片时每张图片都必须跟要替换的图片分辨率一致，然后直接覆盖替换即可。</p>\n<p>启动图片在<code>platforms\\ios\\WeexDemo\\Assets.xcassets\\LaunchImage.launchimage</code>中，替换时同上，注意分辨率。</p>\n<p>Weex本身自带一个启动动画，在<code>platforms\\ios\\WeexDemo\\AppDelegate.m</code>文件中的<code>startSplashScreen</code>函数：</p>\n<pre><code>- (void)startSplashScreen\n{\n    UIView* splashView = [[UIView alloc] initWithFrame:[[UIScreen mainScreen] <span class=\"hljs-keyword\">bounds]];\n</span>    splashView.<span class=\"hljs-keyword\">backgroundColor </span>= WEEX_COLOR<span class=\"hljs-comment\">;</span>\n\n    UIImageView *iconImageView = [UIImageView new]<span class=\"hljs-comment\">;</span>\n    UIImage *icon = [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@<span class=\"hljs-string\">\"weex-icon\"</span> ofType:@<span class=\"hljs-string\">\"png\"</span>]]<span class=\"hljs-comment\">;</span>\n    if ([icon respondsToSelector:@selector(imageWithRenderingMode:)]) {\n        iconImageView.image = [icon imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate]<span class=\"hljs-comment\">;</span>\n        iconImageView.tintColor = [UIColor whiteColor]<span class=\"hljs-comment\">;</span>\n    } else {\n        iconImageView.image = icon<span class=\"hljs-comment\">;</span>\n    }\n    iconImageView.frame = CGRectMake(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">320</span>, <span class=\"hljs-number\">320</span>)<span class=\"hljs-comment\">;</span>\n    iconImageView.contentMode = UIViewContentModeScaleAspectFit<span class=\"hljs-comment\">;</span>\n    iconImageView.center = splashView.center<span class=\"hljs-comment\">;</span>\n    [splashView <span class=\"hljs-keyword\">addSubview:iconImageView];\n</span>\n    [self.window <span class=\"hljs-keyword\">addSubview:splashView];\n</span>\n    float animationDuration = <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">4</span><span class=\"hljs-comment\">;</span>\n    CGFloat <span class=\"hljs-keyword\">shrinkDuration </span>= animationDuration * <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3</span><span class=\"hljs-comment\">;</span>\n    CGFloat growDuration = animationDuration * <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">7</span><span class=\"hljs-comment\">;</span>\n\n    if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">0</span>) {\n        [UIView animateWithDuration:<span class=\"hljs-keyword\">shrinkDuration </span>delay:<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span> usingSpringWithDamping:<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">7</span>f initialSpringVelocity:<span class=\"hljs-number\">10</span> options:UIViewAnimationOptionCurveEaseInOut animations:^{\n            CGAffineTransform <span class=\"hljs-keyword\">scaleTransform </span>= CGAffineTransformMakeScale(<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">75</span>)<span class=\"hljs-comment\">;</span>\n            iconImageView.transform = <span class=\"hljs-keyword\">scaleTransform;\n</span>        } completion:^(<span class=\"hljs-keyword\">BOOL </span>finished) {\n            [UIView animateWithDuration:growDuration animations:^{\n                CGAffineTransform <span class=\"hljs-keyword\">scaleTransform </span>= CGAffineTransformMakeScale(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)<span class=\"hljs-comment\">;</span>\n                iconImageView.transform = <span class=\"hljs-keyword\">scaleTransform;\n</span>                splashView.alpha = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span>\n            } completion:^(<span class=\"hljs-keyword\">BOOL </span>finished) {\n                [splashView removeFromSuperview]<span class=\"hljs-comment\">;</span>\n            }]<span class=\"hljs-comment\">;</span>\n        }]<span class=\"hljs-comment\">;</span>\n    } else {\n        [UIView animateWithDuration:<span class=\"hljs-keyword\">shrinkDuration </span>delay:<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span> options:<span class=\"hljs-number\">0</span> animations:^{\n            CGAffineTransform <span class=\"hljs-keyword\">scaleTransform </span>= CGAffineTransformMakeScale(<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">75</span>)<span class=\"hljs-comment\">;</span>\n            iconImageView.transform = <span class=\"hljs-keyword\">scaleTransform;\n</span>        } completion:^(<span class=\"hljs-keyword\">BOOL </span>finished) {\n            [UIView animateWithDuration:growDuration animations:^{\n                CGAffineTransform <span class=\"hljs-keyword\">scaleTransform </span>= CGAffineTransformMakeScale(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>)<span class=\"hljs-comment\">;</span>\n                iconImageView.transform = <span class=\"hljs-keyword\">scaleTransform;\n</span>                splashView.alpha = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span>\n            } completion:^(<span class=\"hljs-keyword\">BOOL </span>finished) {\n                [splashView removeFromSuperview]<span class=\"hljs-comment\">;</span>\n            }]<span class=\"hljs-comment\">;</span>\n        }]<span class=\"hljs-comment\">;</span>\n    }\n}\n</code></pre><p>说明：</p>\n<ol>\n<li>此动画在背景图片之后播放；</li>\n<li>动画的图标文件为：<code>platforms\\ios\\WeexDemo\\weex-icon.png</code>，需要注意的是，替换成自己的图片后<code>if ([icon respondsToSelector:@selector(imageWithRenderingMode:)])</code>这个条件可能会被触发，进而动画变成一张空白图，因此可考虑把这段删掉，直接执行<code>iconImageView.image = icon;</code>；</li>\n<li>如果替换了启动图片，则动画的背景色也需要相应更改<code>splashView.backgroundColor = WEEX_COLOR;</code>，其中<code>WEEX_COLOR</code>的定义在<code>platforms\\ios\\WeexDemo\\DemoDefine.h</code>中：</li>\n</ol>\n<pre><code><span class=\"hljs-meta\">#import <span class=\"hljs-meta-string\">&lt;Foundation/Foundation.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> CURRENT_IP @<span class=\"hljs-meta-string\">\"your computer device ip\"</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">if</span> TARGET_IPHONE_SIMULATOR</span>\n    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> DEMO_HOST @<span class=\"hljs-meta-string\">\"127.0.0.1\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> DEMO_HOST CURRENT_IP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> DEMO_URL(path) [NSString stringWithFormat:@<span class=\"hljs-meta-string\">\"http://%@:12580/%s\"</span>, DEMO_HOST, #path]</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> HOME_URL [NSString stringWithFormat:@<span class=\"hljs-meta-string\">\"http://%@:8080/dist/index.js\"</span>, DEMO_HOST]</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> BUNDLE_URL [NSString stringWithFormat:@<span class=\"hljs-meta-string\">\"file://%@/bundlejs/index.js\"</span>,[NSBundle mainBundle].bundlePath]</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> UITEST_HOME_URL @<span class=\"hljs-meta-string\">\"http://test?_wx_tpl=http://localhost:12580/test/build/TC__Home.js\"</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> QRSCAN  @<span class=\"hljs-meta-string\">\"com.taobao.WeexDemo.scan\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> WEEX_COLOR [UIColor colorWithRed:0.27 green:0.71 blue:0.94 alpha:1]</span>\n</code></pre><p>注意这里的颜色采用RGBA，而且你在PS中定义的颜色可能跟实际有色差，因此最好定好色号，然后在使用RGBA时可用RGB来这样表示：</p>\n<pre><code>[UIColor <span class=\"hljs-string\">colorWithRed:</span><span class=\"hljs-number\">240</span><span class=\"hljs-regexp\">/255.0 green:240/</span><span class=\"hljs-number\">255.0</span> <span class=\"hljs-string\">blue:</span><span class=\"hljs-number\">240</span>/<span class=\"hljs-number\">255.0</span> <span class=\"hljs-string\">alpha:</span><span class=\"hljs-number\">1</span>]\n</code></pre><h1 id=\"4-\">4 打包</h1>\n<h2 id=\"4-1-appid-\">4.1 AppID和证书申请</h2>\n<p>推荐这篇文章<a href=\"http://www.jianshu.com/p/817686897ec1?open_source=weibo_search\">《iOS App打包上架超详细流程》</a>，写的非常详细，本文不再赘述。</p>\n<h2 id=\"4-2-\">4.2 其他准备</h2>\n<p>先查看<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/</code>下有没有<code>PackageApplication</code>这个文件，如果没有的话打包就会报错：</p>\n<pre><code>xcrun: <span class=\"hljs-keyword\">error</span>: unable <span class=\"hljs-keyword\">to</span> find utility <span class=\"hljs-string\">\"PackageApplication\"</span>, <span class=\"hljs-keyword\">not</span> a developer tool <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">in</span> PATH\n</code></pre><p>可以去搜索引擎找一份或者去GitHub上下载一份：<a href=\"https://github.com/dqy168888/PackageApplication\">dqy168888/PackageApplication</a>或者<a href=\"https://github.com/iOS-Reverse-Engineering-Dev/PackageApplication\">iOS-Reverse-Engineering-Dev/PackageApplication</a></p>\n<p>然后把文件放进<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/</code>中，执行：</p>\n<pre><code>chmod a+x <span class=\"hljs-regexp\">/Applications/</span>Xcode.app<span class=\"hljs-regexp\">/Contents/</span>Developer<span class=\"hljs-regexp\">/Platforms/i</span>PhoneOS.platform<span class=\"hljs-regexp\">/Developer/u</span>sr<span class=\"hljs-regexp\">/bin/</span>PackageApplication\n</code></pre><h2 id=\"4-3-ios-config-json\">4.3 ios.config.json</h2>\n<pre><code>{\n   <span class=\"hljs-attr\">\"AppName\"</span>:<span class=\"hljs-string\">\"WeexApp\"</span>,\n   <span class=\"hljs-attr\">\"Version\"</span>:<span class=\"hljs-string\">\"0.1\"</span>,\n   <span class=\"hljs-attr\">\"BuildVersion\"</span>:<span class=\"hljs-string\">\"0.1.0\"</span>,\n   <span class=\"hljs-attr\">\"AppId\"</span>:<span class=\"hljs-string\">\"\"</span>,\n   <span class=\"hljs-attr\">\"CodeSign\"</span>:<span class=\"hljs-string\">\"\"</span>,\n   <span class=\"hljs-attr\">\"Profile\"</span>:<span class=\"hljs-string\">\"\"</span>,\n   <span class=\"hljs-attr\">\"WeexBundle\"</span>:<span class=\"hljs-string\">\"app.weex.js\"</span>\n}\n</code></pre><ul>\n<li>AppName：你的App打包名称；</li>\n<li>Version：主版本，与Xcode中你的设置最好一直，否则用<code>weex build ios</code>打包后会覆盖Xcode的配置；</li>\n<li>BuildVersion：同上，这个的意思一般是在同一Version内多次打包后的增长值，有的人会用整数来表示；</li>\n<li>AppId：与你申请的一致；</li>\n<li>CodeSign：在 keychain 中点击右键获取的证书ID（证书名称）；</li>\n<li>Profile：mobileprovision的UUID，下一节中讲解；</li>\n<li>WeexBundle：这个属性不像<code>android.config.json</code>里那样支持远程URL，如果写成URL它会报错找不到文件，也就是它并没有把URL当做远程链接处理，以后有空我可能会通过修改源码来实现。但另一方面苹果对热更新封杀的也比较厉害，所以建议这里还是不要改动。</li>\n</ul>\n<h2 id=\"4-4-mobileprovision-uuid-\">4.4 mobileprovision的UUID获取</h2>\n<p>cd到mobileprovision所在的文件夹，执行：</p>\n<pre><code>security cms -D -<span class=\"hljs-selector-tag\">i</span> &lt;你的mobileprovision文件&gt;\n</code></pre><p>会得到一大段dict结构的详细信息，其中包含UUID字段：</p>\n<pre><code>...\n\n&lt;<span class=\"hljs-type\">key</span>&gt;UUID&lt;/<span class=\"hljs-type\">key</span>&gt; \n&lt;<span class=\"hljs-type\">string</span>&gt;<span class=\"hljs-number\">1</span>c38459f<span class=\"hljs-number\">-7</span>xxxxxe286351&lt;/<span class=\"hljs-type\">string</span>&gt; \n\n...\n</code></pre><p>把<code>&lt;string&gt;</code>包含的内容复制到<code>ios.config.json</code>中的<code>Profile</code>属性里即可。</p>\n<h2 id=\"4-5-\">4.5 命令行打包</h2>\n<p>全部准备好后就可以使用<code>weex build ios</code>进行打包了，途中会要求授权两次。</p>\n<p>注意打包后的ipa文件在<code>platforms/ios/build/ipa_build/</code>路径下，而不是官方文档说的<code>/playground/build/ipa_build/</code>里。</p>\n<h2 id=\"4-6-xcode-\">4.6 Xcode打包</h2>\n<p>在<code>Product</code>菜单中选择<code>Archive</code>，如果是给朋友测试，需要先在苹果开发者中心添加朋友的设备，然后打包时选择<code>Ad Hoc</code>打包，选择添加好的设备，打包成的ipa就可以给指定设备测试了。</p>\n<p>全文完。</p>\n<p>转载时请注明 <strong>原作者 A.I.Roland (博客地址：<a href=\"https://airoland.github.io/\">https://airoland.github.io/</a>)</strong> ，并附上 <strong>原文链接</strong> ，谢谢！</p>\n"
}